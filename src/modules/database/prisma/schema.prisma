datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

model User {
  id        String      @unique @default(uuid())
  name      String
  email     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  deletedAt DateTime?
  UserToken UserToken[]
  Workouts  Workouts[]

  @@map("users")
}

model UserToken {
  id        String   @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime @default(now())

  @@map("userToken")
}

model Workouts {
  id        String      @unique @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  Exercises Exercises[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("workouts")
}

model Exercises {
  id         String   @unique @default(uuid())
  workoutId  String
  workout    Workouts @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  name       String
  sets       Int
  reps       Int
  restTime   String
  techniques String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("exercises")
}
